"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var StringMatchPredicates_1 = require("./StringMatchPredicates");
describe('StringMatchPredicates', function () {
    describe('contains', function () {
        it('Returns true when the text contains the search string', function () {
            expect(StringMatchPredicates_1.StringMatchPredicates.contains('')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicates_1.StringMatchPredicates.contains('lorem')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicates_1.StringMatchPredicates.contains('or')('lorem ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the text does not contain the search string', function () {
            expect(StringMatchPredicates_1.StringMatchPredicates.contains('lipsum')('lorem ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('containsAllCharacters', function () {
        it('Returns true if the value contains all characters in the search parameter', function () {
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharacters('abc')('abc')).toBe(true);
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharacters('abc')('abcd')).toBe(true);
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharacters('abc')('dabc')).toBe(true);
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharacters('cba')('abc')).toBe(true);
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharacters('cba')('dabce')).toBe(true);
        });
        it('Returns false if the value does not contain all characters in the search parameter', function () {
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharacters('abc')('def')).toBe(false);
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharacters('abc')('ab')).toBe(false);
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharacters('abc')('bc')).toBe(false);
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharacters('abc')('ac')).toBe(false);
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharacters('aabc')('abc')).toBe(false);
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharacters('aabc')('abcde')).toBe(false);
        });
    });
    describe('containsAllCharactersInOrder', function () {
        it('Returns true if the parameters are equal', function () {
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharactersInOrder('abc')('abc')).toBe(true);
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharactersInOrder('Lorem ipsum')('Lorem ipsum')).toBe(true);
        });
        it('Returns true if all characters in the first parameter are found in the second parameter in the same order', function () {
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharactersInOrder('ac')('abc')).toBe(true);
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharactersInOrder('ipsum sit')('Lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharactersInOrder('Lipsum')('Lorem ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false if there is no match', function () {
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharactersInOrder('abc')('def')).toBe(false);
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharactersInOrder('The')('quick brown fox')).toBe(false);
        });
        it('Returns false if some characters do not match', function () {
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharactersInOrder('abc')('cde')).toBe(false);
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharactersInOrder('Lorem ipsum')('Lipsum')).toBe(false);
        });
        it('Returns false if all characters match, but not in the given order', function () {
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharactersInOrder('abc')('cba')).toBe(false);
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharactersInOrder('Lorem ipsum')('ipsum Lorem')).toBe(false);
        });
        it('Returns true if the first parameter is empty', function () {
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharactersInOrder('')('abc')).toBe(true);
            expect(StringMatchPredicates_1.StringMatchPredicates.containsAllCharactersInOrder('')('')).toBe(true);
        });
    });
    describe('equals', function () {
        it('Returns true when the text equals the search string', function () {
            expect(StringMatchPredicates_1.StringMatchPredicates.equals('lorem ipsum dolor sit amet')('lorem ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the text does not equal the search string', function () {
            expect(StringMatchPredicates_1.StringMatchPredicates.equals('lorem ipsum')('lorem ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('hasAcronym', function () {
        it('Returns true when the text has an wordAcronym that matches the search string', function () {
            expect(StringMatchPredicates_1.StringMatchPredicates.hasAcronym('lidsa')('lorem ipsum dolor sit amet')).toBe(true);
        });
        it('Returns true for both full acronyms and word acronyms', function () {
            expect(StringMatchPredicates_1.StringMatchPredicates.hasAcronym('lisa')('lorem ipsum-dolor sit amet')).toBe(true);
            expect(StringMatchPredicates_1.StringMatchPredicates.hasAcronym('lidsa')('lorem ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the text does not have an wordAcronym that matches the search string', function () {
            expect(StringMatchPredicates_1.StringMatchPredicates.hasAcronym('lisa')('lorem ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('hasPart', function () {
        it('Returns true when the text has a part that matches the search string', function () {
            expect(StringMatchPredicates_1.StringMatchPredicates.hasPart('lorem')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicates_1.StringMatchPredicates.hasPart('ipsum')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicates_1.StringMatchPredicates.hasPart('ipsum')('lorem-ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the text does not have a part that matches the search string', function () {
            expect(StringMatchPredicates_1.StringMatchPredicates.hasPart('lipsum')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicates_1.StringMatchPredicates.hasPart('lipsum')('lorem-ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('hasWord', function () {
        it('Returns true when the text has a word that matches the search string', function () {
            expect(StringMatchPredicates_1.StringMatchPredicates.hasWord('lorem')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicates_1.StringMatchPredicates.hasWord('ipsum')('lorem ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the text does not have a word that matches the search string', function () {
            expect(StringMatchPredicates_1.StringMatchPredicates.hasWord('lipsum')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicates_1.StringMatchPredicates.hasWord('ipsum')('lorem-ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('startsWith', function () {
        it('Returns true when the text starts with the search string', function () {
            expect(StringMatchPredicates_1.StringMatchPredicates.startsWith('')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicates_1.StringMatchPredicates.startsWith('l')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicates_1.StringMatchPredicates.startsWith('lorem')('lorem ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the text does not start with the search string', function () {
            expect(StringMatchPredicates_1.StringMatchPredicates.startsWith('ipsum')('lorem ipsum dolor sit amet')).toBe(false);
        });
    });
});
