"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringMatchPredicate = void 0;
var acronym_1 = require("../utils/acronym");
var fullAcronym_1 = require("../utils/fullAcronym");
var splitInParts_1 = require("../utils/splitInParts");
var splitInWords_1 = require("../utils/splitInWords");
var firstPart_1 = require("../utils/firstPart");
var firstWord_1 = require("../utils/firstWord");
var StringMatchPredicate = /** @class */ (function () {
    function StringMatchPredicate() {
    }
    var _a;
    _a = StringMatchPredicate;
    StringMatchPredicate.acronymContainsAllCharacters = function (search) { return function (value) {
        var wordAcronym = (0, acronym_1.acronym)(value);
        return _a.containsAllCharacters(search)(wordAcronym);
    }; };
    StringMatchPredicate.acronymContainsAllCharactersInOrder = function (search) { return function (value) {
        var wordAcronym = (0, acronym_1.acronym)(value);
        return _a.containsAllCharactersInOrder(search)(wordAcronym);
    }; };
    StringMatchPredicate.acronymStartsWith = function (search) { return function (text) {
        var wordAcronym = (0, acronym_1.acronym)(text);
        var partsAcronym = (0, fullAcronym_1.fullAcronym)(text);
        return wordAcronym.startsWith(search) || partsAcronym.startsWith(search);
    }; };
    StringMatchPredicate.contains = function (search) { return function (text) {
        if (!search)
            return true;
        return text.includes(search);
    }; };
    StringMatchPredicate.containsAllCharacters = function (search) { return function (value) {
        if (search.length > value.length)
            return false;
        var searchCharacters = search.split('');
        var valueCharacters = value.split('');
        for (var _i = 0, searchCharacters_1 = searchCharacters; _i < searchCharacters_1.length; _i++) {
            var char = searchCharacters_1[_i];
            var index = valueCharacters.indexOf(char);
            if (index === -1)
                return false;
            valueCharacters.splice(index, 1);
        }
        return true;
    }; };
    StringMatchPredicate.containsAllCharactersInOrder = function (search) { return function (value) {
        if (!search)
            return true;
        var searchIndex = 0;
        for (var i = 0; i < value.length; i++) {
            if (value[i] === search[searchIndex]) {
                searchIndex++;
                if (searchIndex === search.length)
                    return true;
            }
        }
        return false;
    }; };
    StringMatchPredicate.equals = function (search) { return function (value) { return value === search; }; };
    StringMatchPredicate.fullAcronymContainsAllCharacters = function (search) { return function (value) {
        var acronym = (0, fullAcronym_1.fullAcronym)(value);
        return _a.containsAllCharacters(search)(acronym);
    }; };
    StringMatchPredicate.fullAcronymContainsAllCharactersInOrder = function (search) { return function (value) {
        var acronym = (0, fullAcronym_1.fullAcronym)(value);
        return _a.containsAllCharactersInOrder(search)(acronym);
    }; };
    StringMatchPredicate.hasAcronym = function (search) { return function (text) {
        var wordsAcronym = (0, acronym_1.acronym)(text);
        var partsAcronym = (0, fullAcronym_1.fullAcronym)(text);
        return wordsAcronym === search || partsAcronym === search;
    }; };
    StringMatchPredicate.hasPart = function (part) { return function (value) {
        return (0, splitInParts_1.splitInParts)(value).some(function (p) { return p === part; });
    }; };
    StringMatchPredicate.hasPartContainingAllCharacters = function (part) { return function (text) {
        return (0, splitInParts_1.splitInParts)(text).some(function (p) { return _a.containsAllCharacters(part)(p); });
    }; };
    StringMatchPredicate.hasPartContainingAllCharactersInOrder = function (part) { return function (text) {
        return (0, splitInParts_1.splitInParts)(text).some(function (p) { return _a.containsAllCharactersInOrder(part)(p); });
    }; };
    StringMatchPredicate.hasPartStartingWith = function (search) { return function (value) {
        return (0, splitInParts_1.splitInParts)(value).some(function (p) { return p.startsWith(search); });
    }; };
    StringMatchPredicate.hasWord = function (word) { return function (text) {
        var words = (0, splitInWords_1.splitInWords)(text);
        return words.some(function (w) { return w === word; });
    }; };
    StringMatchPredicate.hasWordContainingAllCharacters = function (search) { return function (text) {
        return (0, splitInWords_1.splitInWords)(text).some(function (word) { return _a.containsAllCharacters(search)(word); });
    }; };
    StringMatchPredicate.hasWordContainingAllCharactersInOrder = function (search) { return function (text) {
        return (0, splitInWords_1.splitInWords)(text).some(function (word) { return _a.containsAllCharactersInOrder(search)(word); });
    }; };
    StringMatchPredicate.hasWordStartingWith = function (search) { return function (text) {
        var words = (0, splitInWords_1.splitInWords)(text);
        return words.some(function (w) { return _a.startsWith(search)(w); });
    }; };
    StringMatchPredicate.startsWith = function (str) { return function (value) { return value.startsWith(str); }; };
    StringMatchPredicate.startsWithPartContainingAllCharacters = function (search) { return function (text) {
        if (!search)
            return true;
        var part = (0, firstPart_1.firstPart)(text);
        return _a.containsAllCharacters(search)(part);
    }; };
    StringMatchPredicate.startsWithPartContainingAllCharactersInOrder = function (search) { return function (text) {
        if (!search)
            return true;
        var part = (0, firstPart_1.firstPart)(text);
        return _a.containsAllCharactersInOrder(search)(part);
    }; };
    StringMatchPredicate.startsWithWordContainingAllCharacters = function (search) { return function (text) {
        if (!search)
            return true;
        var word = (0, firstWord_1.firstWord)(text);
        return _a.containsAllCharacters(search)(word);
    }; };
    StringMatchPredicate.startsWithWordContainingAllCharactersInOrder = function (search) { return function (text) {
        if (!search)
            return true;
        var word = (0, firstWord_1.firstWord)(text);
        return _a.containsAllCharactersInOrder(search)(word);
    }; };
    return StringMatchPredicate;
}());
exports.StringMatchPredicate = StringMatchPredicate;
