"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringMatchRank = void 0;
var StringMatchPredicates_1 = require("./StringMatchPredicates");
var wordAcronym_1 = require("../utils/wordAcronym");
var fullAcronym_1 = require("../utils/fullAcronym");
var constants_1 = require("../constants");
var numberRank_1 = require("../utils/numberRank");
var StringMatchRank = /** @class */ (function () {
    function StringMatchRank() {
    }
    var _a;
    _a = StringMatchRank;
    StringMatchRank.orderedMatchRatioRank = function (search) { return function (value) {
        if (search.length > value.length)
            return false;
        var smallestUnit = 1 / constants_1.DEEP_RANK_STRING_LENGTH_LIMIT;
        var fullRank = (0, numberRank_1.numberRank)(_a.fullStringOrderedMatchRatioRank(search)(value));
        var fullAcronymRank = (0, numberRank_1.numberRank)(_a.fullAcronymOrderedMatchRatioRank(search)(value));
        var acronymRank = (0, numberRank_1.numberRank)(_a.acronymOrderedMatchRatioRank(search)(value));
        var rank = Math.min(fullAcronymRank, acronymRank, fullRank);
        if (rank >= 1 || value.length > constants_1.DEEP_RANK_STRING_LENGTH_LIMIT)
            return rank;
        if (rank === acronymRank)
            return acronymRank + smallestUnit / 2;
        if (rank === fullAcronymRank)
            return fullAcronymRank + smallestUnit / 4;
        return rank;
    }; };
    StringMatchRank.fullStringOrderedMatchRatioRank = function (search) { return function (value) {
        if (!StringMatchPredicates_1.StringMatchPredicates.containsAllCharactersInOrder(search)(value))
            return 1;
        else
            return 1 - (search.length / value.length);
    }; };
    StringMatchRank.fullAcronymOrderedMatchRatioRank = function (search) { return function (value) {
        var acronym = (0, fullAcronym_1.fullAcronym)(value);
        return _a.fullStringOrderedMatchRatioRank(search)(acronym);
    }; };
    StringMatchRank.acronymOrderedMatchRatioRank = function (search) { return function (value) {
        var acronym = (0, wordAcronym_1.wordAcronym)(value);
        return _a.fullStringOrderedMatchRatioRank(search)(acronym);
    }; };
    StringMatchRank.unorderedMatchRatioRank = function (search) { return function (value) {
        if (search.length > value.length)
            return false;
        var smallestUnit = 1 / constants_1.DEEP_RANK_STRING_LENGTH_LIMIT;
        var fullRank = (0, numberRank_1.numberRank)(_a.fullStringUnorderedMatchRatioRank(search)(value));
        var fullAcronymRank = (0, numberRank_1.numberRank)(_a.fullAcronymUnorderedMatchRatioRank(search)(value));
        var acronymRank = (0, numberRank_1.numberRank)(_a.acronymUnorderedMatchRatioRank(search)(value));
        var rank = Math.min(fullAcronymRank, acronymRank, fullRank);
        if (rank >= 1 || value.length > constants_1.DEEP_RANK_STRING_LENGTH_LIMIT)
            return rank;
        if (rank === acronymRank)
            return acronymRank + smallestUnit / 2;
        if (rank === fullAcronymRank)
            return fullAcronymRank + smallestUnit / 4;
        return rank;
    }; };
    StringMatchRank.fullStringUnorderedMatchRatioRank = function (search) { return function (value) {
        if (!StringMatchPredicates_1.StringMatchPredicates.containsAllCharacters(search)(value))
            return 1;
        else
            return 1 - (search.length / value.length);
    }; };
    StringMatchRank.fullAcronymUnorderedMatchRatioRank = function (search) { return function (value) {
        var acronym = (0, fullAcronym_1.fullAcronym)(value);
        return _a.fullStringUnorderedMatchRatioRank(search)(acronym);
    }; };
    StringMatchRank.acronymUnorderedMatchRatioRank = function (search) { return function (value) {
        var acronym = (0, wordAcronym_1.wordAcronym)(value);
        return _a.fullStringUnorderedMatchRatioRank(search)(acronym);
    }; };
    return StringMatchRank;
}());
exports.StringMatchRank = StringMatchRank;
