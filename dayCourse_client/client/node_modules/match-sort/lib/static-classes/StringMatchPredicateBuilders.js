"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringMatchPredicateBuilders = void 0;
var splitInWords_1 = require("../utils/splitInWords");
var splitInParts_1 = require("../utils/splitInParts");
var wordAcronym_1 = require("../utils/wordAcronym");
var fullAcronym_1 = require("../utils/fullAcronym");
var firstWord_1 = require("../utils/firstWord");
var firstPart_1 = require("../utils/firstPart");
var StringMatchPredicateBuilders = /** @class */ (function () {
    function StringMatchPredicateBuilders() {
    }
    var _a;
    _a = StringMatchPredicateBuilders;
    StringMatchPredicateBuilders.someWord = function (predicate) { return function (search) { return function (value) {
        var words = (0, splitInWords_1.splitInWords)(value);
        return words.some(predicate(search));
    }; }; };
    StringMatchPredicateBuilders.somePart = function (predicate) { return function (search) { return function (value) {
        var parts = (0, splitInParts_1.splitInParts)(value);
        return parts.some(predicate(search));
    }; }; };
    StringMatchPredicateBuilders.wordAcronym = function (predicate) { return function (search) { return function (value) {
        var valueAcronym = (0, wordAcronym_1.wordAcronym)(value);
        return predicate(search)(valueAcronym);
    }; }; };
    StringMatchPredicateBuilders.fullAcronym = function (predicate) { return function (search) { return function (value) {
        var valueAcronym = (0, fullAcronym_1.fullAcronym)(value);
        return predicate(search)(valueAcronym);
    }; }; };
    StringMatchPredicateBuilders.acronym = function (predicate) { return function (search) { return function (value) {
        return _a.wordAcronym(predicate)(search)(value) || _a.fullAcronym(predicate)(search)(value);
    }; }; };
    StringMatchPredicateBuilders.firstWord = function (predicate) { return function (search) { return function (value) {
        var firstWordOfValue = (0, firstWord_1.firstWord)(value);
        return predicate(search)(firstWordOfValue);
    }; }; };
    StringMatchPredicateBuilders.firstPart = function (predicate) { return function (search) { return function (value) {
        var firstPartOfValue = (0, firstPart_1.firstPart)(value);
        return predicate(search)(firstPartOfValue);
    }; }; };
    return StringMatchPredicateBuilders;
}());
exports.StringMatchPredicateBuilders = StringMatchPredicateBuilders;
