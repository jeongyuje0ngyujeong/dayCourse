"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var StringMatchPredicate_1 = require("./StringMatchPredicate");
describe('StringMatchPredicate', function () {
    describe('acronymContainsAllCharacters', function () {
        it('Returns true when the wordAcronym contains all the characters in the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.acronymContainsAllCharacters('ilsa')('lorem ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the wordAcronym does not contain all the characters in the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.acronymContainsAllCharacters('lipsum')('lorem ipsum dolor sit amet')).toBe(false);
        });
        it('Does not take dashes into account', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.acronymContainsAllCharacters('ilsa')('lorem-ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('acronymContainsAllCharactersInOrder', function () {
        it('Returns true when the wordAcronym contains all the characters in the search string in the same order', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.acronymContainsAllCharactersInOrder('lisa')('lorem ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the wordAcronym does not contain all the characters in the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.acronymContainsAllCharactersInOrder('ilsa')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.acronymContainsAllCharactersInOrder('lipsum')('lorem ipsum dolor sit amet')).toBe(false);
        });
        it('Does not take dashes into account', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.acronymContainsAllCharactersInOrder('lisa')('lorem-ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('acronymStartsWith', function () {
        it('Returns true when the wordAcronym starts with the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.acronymStartsWith('')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.acronymStartsWith('l')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.acronymStartsWith('li')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.acronymStartsWith('lid')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.acronymStartsWith('lids')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.acronymStartsWith('lidsa')('lorem ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the wordAcronym does not start with the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.acronymStartsWith('lis')('lorem ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('contains', function () {
        it('Returns true when the text contains the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.contains('')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.contains('lorem')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.contains('or')('lorem ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the text does not contain the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.contains('lipsum')('lorem ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('containsAllCharacters', function () {
        it('Returns true if the value contains all characters in the search parameter', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharacters('abc')('abc')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharacters('abc')('abcd')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharacters('abc')('dabc')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharacters('cba')('abc')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharacters('cba')('dabce')).toBe(true);
        });
        it('Returns false if the value does not contain all characters in the search parameter', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharacters('abc')('def')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharacters('abc')('ab')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharacters('abc')('bc')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharacters('abc')('ac')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharacters('aabc')('abc')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharacters('aabc')('abcde')).toBe(false);
        });
    });
    describe('containsAllCharactersInOrder', function () {
        it('Returns true if the parameters are equal', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharactersInOrder('abc')('abc')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharactersInOrder('Lorem ipsum')('Lorem ipsum')).toBe(true);
        });
        it('Returns true if all characters in the first parameter are found in the second parameter in the same order', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharactersInOrder('ac')('abc')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharactersInOrder('ipsum sit')('Lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharactersInOrder('Lipsum')('Lorem ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false if there is no match', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharactersInOrder('abc')('def')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharactersInOrder('The')('quick brown fox')).toBe(false);
        });
        it('Returns false if some characters do not match', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharactersInOrder('abc')('cde')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharactersInOrder('Lorem ipsum')('Lipsum')).toBe(false);
        });
        it('Returns false if all characters match, but not in the given order', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharactersInOrder('abc')('cba')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharactersInOrder('Lorem ipsum')('ipsum Lorem')).toBe(false);
        });
        it('Returns true if the first parameter is empty', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharactersInOrder('')('abc')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.containsAllCharactersInOrder('')('')).toBe(true);
        });
    });
    describe('equals', function () {
        it('Returns true when the text equals the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.equals('lorem ipsum dolor sit amet')('lorem ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the text does not equal the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.equals('lorem ipsum')('lorem ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('fullAcronymContainsAllCharacters', function () {
        it('Returns true when the wordAcronym contains all the characters in the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.fullAcronymContainsAllCharacters('ilsa')('lorem-ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the wordAcronym does not contain all the characters in the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.fullAcronymContainsAllCharacters('lipsum')('lorem-ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('fullAcronymContainsAllCharactersInOrder', function () {
        it('Returns true when the wordAcronym contains all the characters in the search string in the same order', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.fullAcronymContainsAllCharactersInOrder('lisa')('lorem-ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the wordAcronym does not contain all the characters in the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.fullAcronymContainsAllCharactersInOrder('ilsa')('lorem-ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.fullAcronymContainsAllCharactersInOrder('lipsum')('lorem-ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('hasAcronym', function () {
        it('Returns true when the text has an wordAcronym that matches the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.hasAcronym('lidsa')('lorem ipsum dolor sit amet')).toBe(true);
        });
        it('Returns true for both full acronyms and word acronyms', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.hasAcronym('lisa')('lorem ipsum-dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasAcronym('lidsa')('lorem ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the text does not have an wordAcronym that matches the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.hasAcronym('lisa')('lorem ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('hasPart', function () {
        it('Returns true when the text has a part that matches the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPart('lorem')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPart('ipsum')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPart('ipsum')('lorem-ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the text does not have a part that matches the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPart('lipsum')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPart('lipsum')('lorem-ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('hasPartContainingAllCharacters', function () {
        it('Returns true when the text has a part that contains all the characters in the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartContainingAllCharacters('misu')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartContainingAllCharacters('misu')('lorem-ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the text does not have a part that contains all the characters in the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartContainingAllCharacters('lisa')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartContainingAllCharacters('lipsum')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartContainingAllCharacters('lisa')('lorem-ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartContainingAllCharacters('lipsum')('lorem-ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartContainingAllCharacters('lorips')('lorem-ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('hasPartContainingAllCharactersInOrder', function () {
        it('Returns true when the text has a part that contains all the characters in the search string in the same order', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartContainingAllCharactersInOrder('isum')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartContainingAllCharactersInOrder('isum')('lorem-ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the text does not have a part that contains all the characters in the search string in the same order', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartContainingAllCharactersInOrder('misu')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartContainingAllCharactersInOrder('lisa')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartContainingAllCharactersInOrder('lipsum')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartContainingAllCharactersInOrder('misu')('lorem-ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartContainingAllCharactersInOrder('lisa')('lorem-ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartContainingAllCharactersInOrder('lipsum')('lorem-ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartContainingAllCharactersInOrder('lorips')('lorem-ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('hasPartStartingWith', function () {
        it('Returns true when the text has a part that starts with the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartStartingWith('')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartStartingWith('i')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartStartingWith('ips')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartStartingWith('ipsum')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartStartingWith('')('lore-ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartStartingWith('i')('lorem-ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartStartingWith('ips')('lorem-ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartStartingWith('ipsum')('lorem-ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the text does not have a part that starts with the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartStartingWith('lipsum')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartStartingWith('psum')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartStartingWith('lipsum')('lorem-ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasPartStartingWith('psum')('lorem-ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('hasWord', function () {
        it('Returns true when the text has a word that matches the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWord('lorem')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWord('ipsum')('lorem ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the text does not have a word that matches the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWord('lipsum')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWord('ipsum')('lorem-ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('hasWordContainingAllCharacters', function () {
        it('Returns true when the text has a word that contains all the characters in the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordContainingAllCharacters('misu')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordContainingAllCharacters('misu')('lorem-ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordContainingAllCharacters('lipsum')('lorem-ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordContainingAllCharacters('l-ipsum')('lorem-ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordContainingAllCharacters('ipsum-l')('lorem-ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordContainingAllCharacters('olo')('lorem-ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the text does not have a word that contains all the characters in the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordContainingAllCharacters('lisa')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordContainingAllCharacters('lipsum')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordContainingAllCharacters('lisa')('lorem-ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('hasWordContainingAllCharactersInOrder', function () {
        it('Returns true when the text has a word that contains all the characters in the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordContainingAllCharactersInOrder('lipsum')('lorem-ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordContainingAllCharactersInOrder('l-ipsum')('lorem-ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordContainingAllCharactersInOrder('olo')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordContainingAllCharactersInOrder('misu')('lorem-ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the text does not have a word that contains all the characters in the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordContainingAllCharactersInOrder('lisa')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordContainingAllCharactersInOrder('lipsum')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordContainingAllCharactersInOrder('lisa')('lorem-ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordContainingAllCharactersInOrder('misu')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordContainingAllCharactersInOrder('ipsum-l')('lorem-ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('hasWordStartingWith', function () {
        it('Returns true when the text has a word that starts with the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordStartingWith('')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordStartingWith('i')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordStartingWith('ips')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordStartingWith('ipsum')('lorem ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the text does not have a word that starts with the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordStartingWith('lipsum')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordStartingWith('psum')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.hasWordStartingWith('ips')('lorem-ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('startsWith', function () {
        it('Returns true when the text starts with the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWith('')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWith('l')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWith('lorem')('lorem ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the text does not start with the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWith('ipsum')('lorem ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('startsWithPartContainingAllCharacters', function () {
        it('Returns true when the text starts with a part that contains all the characters in the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithPartContainingAllCharacters('merol')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithPartContainingAllCharacters('merol')('lorem-ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the text does not start with a part that contains all the characters in the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithPartContainingAllCharacters('lipsum')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithPartContainingAllCharacters('lipsum')('lorem-ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('startsWithPartContainingAllCharactersInOrder', function () {
        it('Returns true when the text starts with a part that contains all the characters in the search string in the same order', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithPartContainingAllCharactersInOrder('')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithPartContainingAllCharactersInOrder('lor')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithPartContainingAllCharactersInOrder('lorem')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithPartContainingAllCharactersInOrder('')('lorem-ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithPartContainingAllCharactersInOrder('lor')('lorem-ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithPartContainingAllCharactersInOrder('lorem')('lorem-ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the text does not start with a part that contains all the characters in the search string in the same order', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithPartContainingAllCharactersInOrder('lipsum')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithPartContainingAllCharactersInOrder('lipsum')('lorem-ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithPartContainingAllCharactersInOrder('merol')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithPartContainingAllCharactersInOrder('merol')('lorem-ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('startsWithWordContainingAllCharacters', function () {
        it('Returns true when the text starts with a word that contains all the characters in the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithWordContainingAllCharacters('merol')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithWordContainingAllCharacters('mer-olips')('lorem-ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the text does not start with a word that contains all the characters in the search string', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithWordContainingAllCharacters('lipsum')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithWordContainingAllCharacters('lipsumdolor')('lorem-ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithWordContainingAllCharacters('dolor')('lorem-ipsum dolor sit amet')).toBe(false);
        });
    });
    describe('startsWithWordContainingAllCharactersInOrder', function () {
        it('Returns true when the text starts with a word that contains all the characters in the search string in the same order', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithWordContainingAllCharactersInOrder('')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithWordContainingAllCharactersInOrder('ore')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithWordContainingAllCharactersInOrder('lorem')('lorem ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithWordContainingAllCharactersInOrder('oremips')('lorem-ipsum dolor sit amet')).toBe(true);
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithWordContainingAllCharactersInOrder('orem-ips')('lorem-ipsum dolor sit amet')).toBe(true);
        });
        it('Returns false when the text does not start with a word that contains all the characters in the search string in the same order', function () {
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithWordContainingAllCharactersInOrder('lipsum')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithWordContainingAllCharactersInOrder('lipsumdolor')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithWordContainingAllCharactersInOrder('dolor')('lorem ipsum dolor sit amet')).toBe(false);
            expect(StringMatchPredicate_1.StringMatchPredicate.startsWithWordContainingAllCharactersInOrder('merol')('lorem ipsum dolor sit amet')).toBe(false);
        });
    });
});
