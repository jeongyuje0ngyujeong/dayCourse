"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringMatchSort = void 0;
var IndexedStringTransform_1 = require("./IndexedStringTransform");
var MatchSort_1 = require("./MatchSort");
var StringMatchSort = /** @class */ (function (_super) {
    __extends(StringMatchSort, _super);
    function StringMatchSort(defaultTransformations) {
        var _this = _super.call(this) || this;
        _this.defaultTransformations = null;
        _this.indexedStringTransform = new IndexedStringTransform_1.IndexedStringTransform();
        if (defaultTransformations)
            _this.defaultTransformations = defaultTransformations;
        return _this;
    }
    StringMatchSort.from = function (matchRankFunction, transformations) {
        return new StringMatchSort().chain(matchRankFunction, transformations);
    };
    StringMatchSort.prototype.chain = function (exactRankFunction, transformations) {
        var transformationsToApply = transformations || this.defaultTransformations || [];
        var newRankFunction = this
            .indexedStringTransform
            .matchRankWithTransformations(exactRankFunction, transformationsToApply);
        _super.prototype.chain.call(this, newRankFunction);
        return this;
    };
    StringMatchSort.prototype.setFilter = function (filter, transformations) {
        var _this = this;
        var transformationsToApply = transformations || this.defaultTransformations || [];
        var filterFunction = function (search) { return function (value) {
            var transformedSearch = _this.indexedStringTransform.runMultiple(search, transformationsToApply);
            var transformedValue = _this.indexedStringTransform.runMultiple(value, transformationsToApply);
            return filter(transformedSearch)(transformedValue);
        }; };
        _super.prototype.setFilter.call(this, filterFunction);
        return this;
    };
    return StringMatchSort;
}(MatchSort_1.MatchSort));
exports.StringMatchSort = StringMatchSort;
