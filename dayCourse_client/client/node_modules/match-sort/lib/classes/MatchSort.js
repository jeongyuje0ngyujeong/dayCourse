"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MatchSort = void 0;
var RankSort_1 = require("./RankSort");
var SearchListIndex_1 = require("./SearchListIndex");
var listRankFunction_1 = require("../utils/listRankFunction");
var MatchSort = /** @class */ (function () {
    function MatchSort() {
        var _this = this;
        this.filter = function () { return function () { return true; }; };
        this.searchFunction = function (search, values) {
            var filteredValues = values.filter(_this.filter(search));
            return _this.makeSorter(search).sort(filteredValues);
        };
        this.makeRankFunctions = function (search) {
            return _this.matchRankFunctionList.map(function (matchRankFunction) { return matchRankFunction(search); });
        };
        this.matchRankFunctionList = [];
        this.searchListIndex = new SearchListIndex_1.SearchListIndex(this.searchFunction);
    }
    MatchSort.prototype.makeSorter = function (search) {
        return new RankSort_1.RankSort(this.makeRankFunctions(search));
    };
    MatchSort.prototype.chain = function (rankFunction) {
        this.matchRankFunctionList.push(rankFunction);
        return this;
    };
    MatchSort.prototype.setMatchRankFunctionList = function (matchRankFunctionList) {
        this.matchRankFunctionList = matchRankFunctionList;
        return this;
    };
    MatchSort.prototype.setFilter = function (filter) {
        this.filter = filter;
        return this;
    };
    MatchSort.prototype.sort = function (search, values) {
        return this.searchListIndex.run(values, search);
    };
    MatchSort.prototype.onProperty = function (property) {
        var _this = this;
        var newMatcher = new MatchSort();
        var convertRankFunction = function (matchRankFunction) { return function (search) { return function (value) { return matchRankFunction(search)(value[property]); }; }; };
        var newRankFunctions = this
            .matchRankFunctionList
            .map(convertRankFunction);
        newMatcher.setMatchRankFunctionList(newRankFunctions);
        var newFilter = function (search) { return function (value) { return _this.filter(search)(value[property]); }; };
        newMatcher.setFilter(newFilter);
        return newMatcher;
    };
    MatchSort.prototype.onList = function () {
        var _this = this;
        var newMatcher = new MatchSort();
        var convertRankFunction = function (matchRankFunction) { return function (search) {
            var rankFunction = matchRankFunction(search);
            return (0, listRankFunction_1.listRankFunction)(rankFunction);
        }; };
        var newRankFunctions = this
            .matchRankFunctionList
            .map(convertRankFunction);
        newMatcher.setMatchRankFunctionList(newRankFunctions);
        var newFilter = function (search) { return function (values) { return values.some(_this.filter(search)); }; };
        newMatcher.setFilter(newFilter);
        return newMatcher;
    };
    return MatchSort;
}());
exports.MatchSort = MatchSort;
