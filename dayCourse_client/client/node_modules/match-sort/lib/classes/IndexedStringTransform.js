"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexedStringTransform = void 0;
var numberRank_1 = require("../utils/numberRank");
var IndexedStringTransform = /** @class */ (function () {
    function IndexedStringTransform() {
        this.transforms = new Map();
    }
    IndexedStringTransform.prototype.get = function (input) {
        return this.transforms.get(input);
    };
    IndexedStringTransform.prototype.getResult = function (input, transformation) {
        var _a;
        return (_a = this.get(input)) === null || _a === void 0 ? void 0 : _a.get(transformation);
    };
    IndexedStringTransform.prototype.run = function (input, transformation) {
        var results = this.get(input);
        if (results === undefined) {
            var result = transformation(input);
            var newMap = new Map([[transformation, result]]);
            this.transforms.set(input, newMap);
            return result;
        }
        else {
            var result = results.get(transformation);
            if (result === undefined) {
                var finalResult = transformation(input);
                results.set(transformation, finalResult);
                return finalResult;
            }
            else {
                return result;
            }
        }
    };
    IndexedStringTransform.prototype.runMultiple = function (input, transformations) {
        var _this = this;
        return transformations.reduce(function (previousValue, transform) { return _this.run(previousValue, transform); }, input);
    };
    IndexedStringTransform.prototype.runOnProperty = function (object, property, transformation) {
        return this.run(object[property], transformation);
    };
    IndexedStringTransform.prototype.runMultipleOnProperty = function (object, property, transformations) {
        return this.runMultiple(object[property], transformations);
    };
    IndexedStringTransform.prototype.matchRankWithTransformations = function (matchRankFunction, transformations) {
        var _this = this;
        return function (search) { return function (value) {
            var rank = (0, numberRank_1.numberRank)(matchRankFunction(search)(value));
            if (rank === 0)
                return 0;
            var transformedSearch = search;
            var transformedValue = value;
            for (var _i = 0, transformations_1 = transformations; _i < transformations_1.length; _i++) {
                var transformation = transformations_1[_i];
                transformedSearch = _this.run(transformedSearch, transformation);
                transformedValue = _this.run(transformedValue, transformation);
                var result = (0, numberRank_1.numberRank)(matchRankFunction(transformedSearch)(transformedValue));
                if (result === 0)
                    return rank;
                rank = rank + result;
            }
            return rank;
        }; };
    };
    return IndexedStringTransform;
}());
exports.IndexedStringTransform = IndexedStringTransform;
