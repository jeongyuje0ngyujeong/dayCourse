"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var RankSort_1 = require("./RankSort");
describe('RankSort', function () {
    describe('sort', function () {
        it('Sorts the items that make the rank function return true before the ones that make the rank function return false', function () {
            var array = [1, 2, 3, 4, 5];
            var is2Or4 = function (value) { return value === 2 || value === 4; };
            var rankSort = new RankSort_1.RankSort(is2Or4);
            var result = rankSort.sort(array);
            expect(result).toEqual([2, 4, 1, 3, 5]);
        });
        it('Sorts the items by the value returned by the rank function', function () {
            var array = [1, 2, 3, 4, 5];
            var distanceTo3 = function (value) { return Math.abs(value - 3); };
            var rankSort = new RankSort_1.RankSort(distanceTo3);
            var result = rankSort.sort(array);
            expect(result).toEqual([3, 2, 4, 1, 5]);
        });
    });
    describe('chain', function () {
        it('Applies the chained function if the first return false', function () {
            var strIsLowercaseA = function (value) { return value === 'a'; };
            var strIsLowercasOrUppercaseA = function (value) { return value.toLowerCase() === 'a'; };
            var caseSensitiveRankSort = new RankSort_1.RankSort(strIsLowercaseA);
            var rankSort = caseSensitiveRankSort.chain(strIsLowercasOrUppercaseA);
            var array = ['B', 'b', 'A', 'a'];
            var result = rankSort.sort(array);
            expect(result).toEqual(['a', 'A', 'B', 'b']);
        });
        it('Applies the chained function as expected when it returns a number', function () {
            var strContainsAAndB = function (value) { return value.includes('a') && value.includes('b'); };
            var positionOfA = function (value) { return value.includes('a') ? value.indexOf('a') : Infinity; };
            var array = ['abc', 'bcd', 'cba', 'iea', 'aei'];
            var rankSort = new RankSort_1.RankSort(strContainsAAndB).chain(positionOfA);
            var result = rankSort.sort(array);
            expect(result).toEqual(['abc', 'cba', 'aei', 'iea', 'bcd']);
        });
    });
});
