"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SearchListIndex_1 = require("./SearchListIndex");
describe('SearchListIndex', function () {
    describe('run', function () {
        var array1 = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
        var array2 = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];
        var searchFunction = function (search, values) {
            return values.filter(function (value) { return value.includes(search); });
        };
        it('Returns the correct result', function () {
            var searchListIndex = new SearchListIndex_1.SearchListIndex(searchFunction);
            var result1 = searchListIndex.run(array1, 'ur');
            expect(result1).toEqual(['thursday', 'saturday']);
            var result2 = searchListIndex.run(array2, 'ber');
            expect(result2).toEqual(['september', 'october', 'november', 'december']);
        });
        it('Caches the result', function () {
            var searchListIndex = new SearchListIndex_1.SearchListIndex(searchFunction);
            var result1 = searchListIndex.run(array1, 'ur');
            var result2 = searchListIndex.run(array1, 'ur');
            expect(result1).toBe(result2);
        });
        it('Distinguishes between different arrays', function () {
            var searchListIndex = new SearchListIndex_1.SearchListIndex(searchFunction);
            var result1 = searchListIndex.run(array1, 'ur');
            var result2 = searchListIndex.run(array2, 'ur');
            expect(result1).not.toBe(result2);
        });
        it('Runs the search function on the previous result when the search string starts with the previous search string', function () {
            var searchFunctionMock = jest.fn().mockImplementation(searchFunction);
            var searchListIndex = new SearchListIndex_1.SearchListIndex(searchFunctionMock);
            var result1 = searchListIndex.run(array2, 'ju');
            var result2 = searchListIndex.run(array2, 'jun');
            expect(result1).toEqual(['june', 'july']);
            expect(result2).toEqual(['june']);
            expect(searchFunctionMock).toHaveBeenCalledTimes(2);
            expect(searchFunctionMock).toHaveBeenLastCalledWith('jun', result1);
        });
        it('Returns the correct result when the search string does not start with the previous search string', function () {
            var searchListIndex = new SearchListIndex_1.SearchListIndex(searchFunction);
            var result1 = searchListIndex.run(array2, 'ju');
            var result2 = searchListIndex.run(array2, 'fe');
            expect(result1).toEqual(['june', 'july']);
            expect(result2).toEqual(['february']);
        });
    });
});
