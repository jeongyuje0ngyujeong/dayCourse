"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var IndexedStringTransform_1 = require("./IndexedStringTransform");
describe('IndexedStringTransform', function () {
    describe('run', function () {
        it('Returns the expected result and inserts it to the index map', function () {
            var indexedStringTransform = new IndexedStringTransform_1.IndexedStringTransform();
            var transform = function (input) { return input.toLowerCase(); };
            var input = 'Test';
            var expectedResult = 'test';
            var result = indexedStringTransform.run(input, transform);
            expect(result).toBe(expectedResult);
            expect(indexedStringTransform.getResult(input, transform)).toBe(expectedResult);
        });
        it('Returns the expected result when called the second time', function () {
            var indexedStringTransform = new IndexedStringTransform_1.IndexedStringTransform();
            var transform = function (input) { return input.toLowerCase(); };
            var input = 'Test';
            var expectedResult = 'test';
            var result1 = indexedStringTransform.run(input, transform);
            expect(result1).toBe(expectedResult);
            var result2 = indexedStringTransform.run(input, transform);
            expect(result2).toBe(expectedResult);
        });
        it('Only runs the transform function once', function () {
            var indexedStringTransform = new IndexedStringTransform_1.IndexedStringTransform();
            var transform = jest.fn().mockImplementation(function (input) { return input.toLowerCase(); });
            var input = 'Test';
            expect(transform).not.toHaveBeenCalled();
            indexedStringTransform.run(input, transform);
            expect(transform).toHaveBeenCalledTimes(1);
            indexedStringTransform.run(input, transform);
            expect(transform).toHaveBeenCalledTimes(1);
        });
    });
    describe('runMultiple', function () {
        // Test data:
        var transform1 = function (input) { return input.toLowerCase(); };
        var transform2 = function (input) { return input + 'TEST'; };
        var input = 'Test';
        var expectedFirstResult = 'test';
        var expectedResult = 'testTEST'; // Would be "testtest" if run in the reverse order
        it('Runs the given transformations in the correct order', function () {
            var indexedStringTransform = new IndexedStringTransform_1.IndexedStringTransform();
            var result = indexedStringTransform.runMultiple(input, [transform1, transform2]);
            expect(result).toBe(expectedResult);
        });
        it('Runs the transform functions only once and returns the expected value when called twice', function () {
            var indexedStringTransform = new IndexedStringTransform_1.IndexedStringTransform();
            var transform1Mock = jest.fn().mockImplementation(transform1);
            var transform2Mock = jest.fn().mockImplementation(transform2);
            expect(transform1Mock).not.toHaveBeenCalled();
            expect(transform2Mock).not.toHaveBeenCalled();
            var result1 = indexedStringTransform.runMultiple(input, [transform1Mock, transform2Mock]);
            expect(result1).toBe(expectedResult);
            expect(transform1Mock).toHaveBeenCalledTimes(1);
            expect(transform2Mock).toHaveBeenCalledTimes(1);
            var result2 = indexedStringTransform.runMultiple(input, [transform1Mock, transform2Mock]);
            expect(result2).toBe(expectedResult);
            expect(transform1Mock).toHaveBeenCalledTimes(1);
            expect(transform2Mock).toHaveBeenCalledTimes(1);
        });
        it('Puts both results in the index map', function () {
            var indexedStringTransform = new IndexedStringTransform_1.IndexedStringTransform();
            var result = indexedStringTransform.runMultiple(input, [transform1, transform2]);
            expect(result).toBe(expectedResult);
            expect(indexedStringTransform.getResult(input, transform1)).toBe(expectedFirstResult);
            expect(indexedStringTransform.getResult(expectedFirstResult, transform2)).toBe(expectedResult);
        });
    });
    describe('matchRankWithTransformations', function () {
        var testFunction = function (search) { return function (value) { return search === value; }; };
        var transform1 = function (input) { return input.toLowerCase(); };
        var transform2 = function (input) { return input.replace('oa', 'e'); };
        var transformations = [transform1, transform2];
        it('Returns 0 when the matchRankFunction returns true', function () {
            var indexedStringTransform = new IndexedStringTransform_1.IndexedStringTransform();
            var result = indexedStringTransform.matchRankWithTransformations(testFunction, []);
            expect(result('test')('test')).toBe(0);
        });
        it('Returns 1 when the matchRankFunction returns true after the first transformation', function () {
            var indexedStringTransform = new IndexedStringTransform_1.IndexedStringTransform();
            var result = indexedStringTransform.matchRankWithTransformations(testFunction, transformations);
            expect(result('tesT')('Test')).toBe(1);
        });
        it('Returns 2 when the matchRankFunction returns true after the second transformation', function () {
            var indexedStringTransform = new IndexedStringTransform_1.IndexedStringTransform();
            var result = indexedStringTransform.matchRankWithTransformations(testFunction, transformations);
            expect(result('test')('toast')).toBe(2);
        });
    });
    describe('Performance', function () {
        var testInput = 'Lorem ipsum dolor sit amet';
        var removeAccents = function (input) { return input.normalize('NFD').replace(/[\u0300-\u036f]/g, ''); };
        test('Without caching', function () {
            for (var i = 0; i < 100000; i++) {
                removeAccents(testInput);
            }
        });
        test('With caching', function () {
            var indexedStringTransform = new IndexedStringTransform_1.IndexedStringTransform();
            for (var i = 0; i < 100000; i++) {
                indexedStringTransform.run(testInput, removeAccents);
            }
        });
    });
});
