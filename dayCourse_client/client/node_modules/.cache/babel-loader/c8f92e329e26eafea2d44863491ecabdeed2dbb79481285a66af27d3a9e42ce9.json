{"ast":null,"code":"import localforage from \"localforage\";\nimport { matchSorter } from \"match-sorter\";\nimport sortBy from \"sort-by\";\nimport axios from 'axios';\nexport async function getSchedules(query, startDate) {\n  // let schedules = await localforage.getItem(\"schedules\");\n  if (!startDate) startDate = new Date();\n  const getData = async () => {\n    let response = await axios.get('http://192.168.1.80:5000/home', {\n      params: {\n        userId: 1,\n        startDate: startDate\n      }\n    });\n    return response.data;\n  };\n  let schedules = await getData();\n  // console.log(schedules);\n  await set(schedules);\n  if (!Array.isArray(schedules)) {\n    schedules = [];\n  }\n  if (query) {\n    schedules = matchSorter(schedules, query, {\n      keys: [\"dateKey\"]\n    });\n  }\n  return schedules.sort(sortBy(\"dateKey\"));\n}\nexport async function createSchedule(dateKey, formData) {\n  let schedules = await localforage.getItem(\"schedules\");\n  console.log(formData);\n  const postData = async () => {\n    let response = axios.post('http://192.168.1.80:5000/home/plan', {\n      userId: 1,\n      dateKey: dateKey,\n      groupId: formData.get(\"groupId\"),\n      planName: formData.get(\"planName\")\n    });\n    return response;\n  };\n  let result = await postData();\n  console.log(result);\n  // set(result);\n\n  return result.data.msg;\n\n  // let id = Math.random().toString(36).substring(2, 9);\n  // let schedule = { id, dateKey, createdAt: Date.now() };\n  // let schedules = await getSchedules();\n  // schedules.unshift(schedule);\n  // await set(schedules);\n  // return schedule;\n}\nexport async function getSchedule(dateKey) {\n  let schedules = (await localforage.getItem(\"schedules\")) || [];\n  let schedule = schedules.filter(schedule => schedule.dateKey === dateKey);\n  return schedule !== null && schedule !== void 0 ? schedule : null;\n}\nexport async function getEvent(id) {\n  // await fakeNetwork(`schedule:${dateKey}`);\n  let schedules = (await localforage.getItem(\"schedules\")) || [];\n  let event = schedules.find(event => String(event.planId) === id);\n  console.log(event);\n  return event !== null && event !== void 0 ? event : null;\n}\nexport async function updateSchedule(dateKey, updates) {\n  let schedules = await localforage.getItem(\"schedules\");\n  let schedule = schedules.find(schedule => String(schedule.dateKey) === dateKey);\n  if (!schedule) throw new Error(\"No schedule found for\", dateKey);\n  Object.assign(schedule, updates);\n  await set(schedules);\n  const postData = async () => {\n    let response = axios.post('http://192.168.1.80:5000/home/plan/update', {\n      userId: 1,\n      schedule: schedule\n    });\n    return response;\n  };\n  let result = await postData();\n  return result.data.msg;\n\n  // let schedules = await localforage.getItem(\"schedules\");\n  // let schedule = schedules.find(schedule => String(schedule.dateKey) === dateKey);\n  // if (!schedule) throw new Error(\"No schedule found for\", dateKey);\n  // Object.assign(schedule, updates);\n  // await set(schedules);\n  // return schedule;\n}\nexport async function deleteSchedule(id) {\n  let schedules = await localforage.getItem(\"schedules\");\n  let schedule = schedules.find(schedule => schedule.planId === id);\n  let index = schedules.findIndex(schedule => schedule.planId === id);\n  console.log('index: ', index, id);\n  const postData = async () => {\n    let response = axios.post('http://192.168.1.80:5000/home/plan/delete', {\n      userId: 1,\n      planId: schedule.planId\n    });\n    return response;\n  };\n  if (index > -1) {\n    schedules.splice(index, 1);\n    await postData();\n    await set(schedules);\n    return schedules;\n  }\n\n  // getSchedules();\n  return false;\n}\nfunction set(schedules) {\n  return localforage.setItem(\"schedules\", schedules);\n}\n\n// let fakeCache = {};\n\n// async function fakeNetwork(key) {\n//     if (!key) {\n//         fakeCache = {};\n//     }\n\n//     if (fakeCache[key]) {\n//         return;\n//     }\n\n//     fakeCache[key] = true;\n//     return new Promise(res => {\n//         setTimeout(res, Math.random() * 800);\n//     });\n// }","map":{"version":3,"names":["localforage","matchSorter","sortBy","axios","getSchedules","query","startDate","Date","getData","response","get","params","userId","data","schedules","set","Array","isArray","keys","sort","createSchedule","dateKey","formData","getItem","console","log","postData","post","groupId","planName","result","msg","getSchedule","schedule","filter","getEvent","id","event","find","String","planId","updateSchedule","updates","Error","Object","assign","deleteSchedule","index","findIndex","splice","setItem"],"sources":["/Users/jeongyuje0ngyujeong/git_hub/krafton_jungle/dayCourse/dayCourse_client/client/src/schedules.js"],"sourcesContent":["import localforage from \"localforage\";\nimport { matchSorter } from \"match-sorter\";\nimport sortBy from \"sort-by\";\nimport axios from 'axios';\n\nexport async function getSchedules(query, startDate) {\n    // let schedules = await localforage.getItem(\"schedules\");\n    if (!startDate)\n        startDate = new Date()\n\n    const getData = async () => {\n        let response = await axios.get('http://192.168.1.80:5000/home',{\n            params: {\n                userId: 1,\n                startDate: startDate\n            }\n        });\n        return response.data;\n    }\n\n    let schedules = await getData();\n    // console.log(schedules);\n    await set(schedules);\n\n    if (!Array.isArray(schedules)) {\n        schedules = [];\n    }\n    if (query) {\n        schedules = matchSorter(schedules, query, { keys: [\"dateKey\"] });\n    }\n    return schedules.sort(sortBy(\"dateKey\"));\n}\n\nexport async function createSchedule(dateKey, formData) {\n    let schedules = await localforage.getItem(\"schedules\");\n    console.log(formData);\n    const postData = async () => {\n        let response = axios.post('http://192.168.1.80:5000/home/plan', {\n            userId: 1,\n            dateKey: dateKey,\n            groupId: formData.get(\"groupId\"),\n            planName: formData.get(\"planName\")\n        });\n        return response;\n    }\n    \n    let result = await postData();\n    console.log(result);\n    // set(result);\n\n    return result.data.msg;\n\n    // let id = Math.random().toString(36).substring(2, 9);\n    // let schedule = { id, dateKey, createdAt: Date.now() };\n    // let schedules = await getSchedules();\n    // schedules.unshift(schedule);\n    // await set(schedules);\n    // return schedule;\n}\n\nexport async function getSchedule(dateKey) {\n    let schedules = await localforage.getItem(\"schedules\") || [];\n\n    let schedule = schedules.filter(\n        (schedule) => \n            schedule.dateKey === dateKey \n    )\n    return schedule ?? null;\n}\n\nexport async function getEvent(id) {\n    // await fakeNetwork(`schedule:${dateKey}`);\n    let schedules = await localforage.getItem(\"schedules\") || [];\n    let event = schedules.find(\n        (event) => \n            String(event.planId) === id\n    )\n    console.log(event)\n    return event ?? null;\n}\n\nexport async function updateSchedule(dateKey, updates) {\n\n    let schedules = await localforage.getItem(\"schedules\");\n    let schedule = schedules.find(schedule => String(schedule.dateKey) === dateKey);\n    if (!schedule) throw new Error(\"No schedule found for\", dateKey);\n    Object.assign(schedule, updates);\n    await set(schedules);\n\n    const postData = async () => {\n        let response = axios.post('http://192.168.1.80:5000/home/plan/update', {\n            userId: 1,\n            schedule: schedule\n        });\n        return response;\n    }\n    \n    let result = await postData();\n\n    return result.data.msg;\n\n\n    // let schedules = await localforage.getItem(\"schedules\");\n    // let schedule = schedules.find(schedule => String(schedule.dateKey) === dateKey);\n    // if (!schedule) throw new Error(\"No schedule found for\", dateKey);\n    // Object.assign(schedule, updates);\n    // await set(schedules);\n    // return schedule;\n}\n\nexport async function deleteSchedule(id) {\n    let schedules = await localforage.getItem(\"schedules\");\n    let schedule = schedules.find(schedule => schedule.planId === id);\n    let index = schedules.findIndex(schedule => schedule.planId === id);\n    console.log('index: ', index, id);\n    \n    const postData = async () => {\n        let response = axios.post('http://192.168.1.80:5000/home/plan/delete', {\n            userId: 1,\n            planId: schedule.planId\n        });\n        \n\n        return response;\n    }\n\n    if (index > -1) {\n        schedules.splice(index, 1);\n        \n        await postData();\n        await set(schedules);\n        \n        return schedules;\n    }\n\n    // getSchedules();\n    return false;\n}\n\nfunction set(schedules) {\n    return localforage.setItem(\"schedules\", schedules);\n}\n\n// let fakeCache = {};\n\n// async function fakeNetwork(key) {\n//     if (!key) {\n//         fakeCache = {};\n//     }\n\n//     if (fakeCache[key]) {\n//         return;\n//     }\n\n//     fakeCache[key] = true;\n//     return new Promise(res => {\n//         setTimeout(res, Math.random() * 800);\n//     });\n// }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}